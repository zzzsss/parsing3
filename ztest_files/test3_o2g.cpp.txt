/*
 * test3_o2g.cpp
 *
 *  Created on: Apr 20, 2015
 *      Author: zzs
 */

/*
 * test2_o2sib.cpp
 *
 *  Created on: Mar 11, 2015
 *      Author: zzs
 */

#include<fstream>
#include<ctime>
#include<set>
#include"Util.h"
#include"StringPool.h"
#include"DependencyEvaluator.h"
#include"DependencyParser.h"
#include"DependencyParser2.h"
#include"new_ones.h"
#include "EisnerO2g.h"
using namespace std;

extern StringPool* pool;
extern set<string> punctSet;
extern set<string> coordSet;
extern set<string> commaSet;
extern vector<vector<vector<double> > > probs;
extern vector<vector<double> > probs_gchs;
extern vector<vector<vector<double> > > probs_grands;
extern vector<vector<vector<vector<double> > > > nt_probs;

double* testing_get_probs_o2g()
{
	int size = probs.size();
	double* rr = new double[size*size*size];
	//g-s-t
	for(int g=0;g<size;g++)
		for(int s=0;s<size;s++){
			for(int t = 0; t<size; t++){
				if(s<t)
					rr[get_index2_o2g(size,g,s,t)] = probs[s][t][0]+probs_grands[g][s][t]+probs_gchs[g][t];
				else
					rr[get_index2_o2g(size,g,s,t)] = probs[t][s][1]+probs_grands[g][s][t]+probs_gchs[g][t];
			}
		}
	for(int i=0;i<size;i++)
		rr[get_index2_o2g(size,0,0,i)] = probs[0][i][0];
	return rr;
}

//test for the O2g implement
int Test3Main(int argc,char **argv)
{
	/* 1.init(arguments) --- the same as the original one */
	punctSet.insert("''");
	punctSet.insert("``");
	punctSet.insert(".");
	punctSet.insert(":");
	punctSet.insert(",");
	ifstream config_in("config3");
	vector<string*> args;
	char line[100];
	while(config_in.getline(line, 100)){
		string arg = string(line);
		args.push_back(pool->get(arg));
	}
	ParserOptions* options = new ParserOptions(args);
	pool->addString(options->pool_size);
	int length = (int)(args.size());
	for(int i = 0; i < length; i++){
		pool->push_back(args[i]);
	}
	config_in.close();

	//testing and timing
	DependencyPipe* pipe = new DependencyPipe2OGrandChildren(options);
	DependencyParser* dp = new DependencyParser(pipe, options);
	/* 0.init sth */
	srand((int)time(0));
	/* 1.init files */
	string* tFile = dp->options->testfile;
	string* file = dp->options->outfile;
	long start,end;
	dp->pipe->initInputFile(tFile);
	dp->pipe->initOutputFile(file);

	/* 2.start */
	cout<<"Processing Sentence: \n";
	DependencyInstance* instance = dp->pipe->nextInstance();
	int cnt = 0;
	int ALL_r1time=0,ALL_r2time=0,ALL_error=0;
	while(instance != NULL){
		printf("%d: ", cnt++);
		int length = instance->length();
		//1.the original one
		start = clock() / (CLOCKS_PER_SEC/1000);
		vector<int>*r1 = newone_outputparse_one(dp,instance,2,0);
		end = clock() / (CLOCKS_PER_SEC/1000);
		cout << end-start << "; ";
		ALL_r1time += end-start;
		//2.the new one
		double* temp_probs = testing_get_probs_o2g();

		//check_two(length,temp_probs);

		start = clock() / (CLOCKS_PER_SEC/1000);
		vector<int>*r2 = decodeProjective_o2g(length,temp_probs);
		end = clock() / (CLOCKS_PER_SEC/1000);
		cout << end-start << "|| ";
		ALL_r2time += end-start;
		//3.compare
		cout << r1->size() << '-' << r2->size() << "---";
		if(r1->size() == (r2->size()-1)){
			//r2 has the-root-element
			int error=0;
			for(int i=0;i<r1->size();i++)
				if((*r1)[i] != (*r2)[i+1])
					error++;
			ALL_error += error;
			cout << error;
			cout << endl;
		}
		/*
		cout << '\n';
		for(int i=0;i<r1->size();i++)
			cout << (*r1)[i] << ';';
		cout << '\n';
		for(int i=0;i<r2->size()-1;i++)
			cout << (*r2)[i+1] << ';';
		cout << '\n';
			//calculate
		double score1=0,score2=0;

		//check_two(length,temp_probs);

		for(int i=0;i<r1->size();i++)
			score1 += test_score(r2->size(),temp_probs,i+1,(*r1)[i]);
		for(int i=0;i<r1->size();i++)
			score2 += test_score(r2->size(),temp_probs,i+1,(*r2)[i+1]);
		*/

		delete r1;
		delete r2;
		delete []temp_probs;
		delete(instance);
		instance = dp->pipe->nextInstance();
	}
	cout << ALL_error << ";" << ALL_r1time << " vs " << ALL_r2time << endl;
	dp->pipe->close();
	return 0;
}




